"""
进程：
	进程是资源分配的基本单位，是程序执行时的一个实例。程序运行时会创建一个进程，为它分配资源，
	然后把它放到进程就绪队列，进程调度器选中它的时候就会为它分配CPU时间，程序开始真正运行。

	Linux系统函数fork()可以在父进程中创建一个子进程，这样的话，
	在一个进程接到来自客户端新的请求时就可以复制出一个子进程让其来处理，
	父进程只需负责监控请求的到来，然后创建子进程让其去处理，这样就能做到并发处理。
线程：
	线程是程序执行时的最小单位，它是进程的一个执行流，是CPU调度和分派的基本单位，
	一个进程可以由很多个线程组成，线程间共享进程的所有资源，每个线程有自己的堆栈和局部变量。
	线程由CPU独立调度执行，在多CPU环境下就允许多个线程同时运行。同样多线程也可以实现并发操作，
	每个请求分配一个线程来处理。

协程：
	进程和线程都会面临着内核态和用户态的切换问题耗费切换时间
	协程就是用户自己控制切换时机，比如在执行函数A时，随时中断，去执行函数B，
	然后继续从A函数中断的地方执行

"""